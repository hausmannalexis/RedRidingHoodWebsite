Built-in Functions

    abs(x): Returns the absolute value of a number.
    all(iterable): Returns True if all elements in the iterable are true.
    any(iterable): Returns True if any element in the iterable is true.
    ascii(object): Returns a string containing a printable representation of an object.
    bin(x): Converts an integer to a binary string.
    bool(x): Converts a value to Boolean (True or False).
    breakpoint(): Enters the debugger at the call site.
    bytearray(source, encoding, errors): Returns a mutable sequence of bytes.
    bytes(source, encoding, errors): Returns an immutable sequence of bytes.
    callable(object): Returns True if the object appears callable.
    chr(i): Returns a string representing a character whose Unicode code point is the integer i.
    classmethod(function): Returns a class method for a function.
    compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1): Compiles source into a code or AST object.
    complex(real[, imag]): Creates a complex number.
    delattr(object, name): Deletes the named attribute from the object.
    dict(): Creates a new dictionary.
    dir([object]): Returns a list of valid attributes for the object.
    divmod(a, b): Returns a tuple of the quotient and remainder when a is divided by b.
    enumerate(iterable, start=0): Returns an enumerate object.
    eval(expression, globals=None, locals=None): Evaluates a Python expression.
    exec(object[, globals[, locals]]): Executes dynamically created Python code.
    filter(function, iterable): Constructs an iterator from elements of iterable for which function returns True.
    float(x): Converts a number or string to a floating point number.
    format(value[, format_spec]): Converts a value to a formatted representation.
    frozenset([iterable]): Returns an immutable set object.
    getattr(object, name[, default]): Returns the value of the named attribute of object.
    globals(): Returns the current global symbol table as a dictionary.
    hasattr(object, name): Returns True if the object has the given named attribute.
    hash(object): Returns the hash value of an object.
    help([object]): Invokes the built-in help system.
    hex(x): Converts an integer to a hexadecimal string.
    id(object): Returns the identity of an object.
    input([prompt]): Reads a line from input, converts it to a string and returns it.
    int(x, base=10): Converts a number or string to an integer.
    isinstance(object, classinfo): Returns True if the object is an instance of the classinfo argument.
    issubclass(class, classinfo): Returns True if class is a subclass of classinfo.
    iter(object[, sentinel]): Returns an iterator object.
    len(s): Returns the length (number of items) of an object.
    list([iterable]): Creates a list object.
    locals(): Updates and returns a dictionary representing the current local symbol table.
    map(function, iterable, ...): Applies function to every item of iterable and returns an iterator.
    max(iterable, *[, key, default]): Returns the largest item in an iterable.
    min(iterable, *[, key, default]): Returns the smallest item in an iterable.
    next(iterator[, default]): Retrieves the next item from the iterator.
    object(): Returns a new featureless object.
    oct(x): Converts an integer to an octal string.
    open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None): Opens a file and returns a file object.
    ord(c): Returns an integer representing the Unicode code point of a character.
    pow(base, exp[, mod]): Returns base to the power exp; if mod is present, returns base to the power exp, modulo mod.
    print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False): Prints objects to the text stream file.
    property(fget=None, fset=None, fdel=None, doc=None): Returns a property attribute.
    range(stop) or range(start, stop[, step]): Returns an immutable sequence of numbers.
    repr(object): Returns a string containing a printable representation of an object.
    reversed(seq): Returns a reverse iterator.
    round(number[, ndigits]): Rounds a number to a given precision in decimal digits.
    set([iterable]): Returns a new set object.
    setattr(object, name, value): Sets the named attribute on the given object to the specified value.
    slice(stop) or slice(start, stop[, step]): Returns a slice object.
    sorted(iterable, *, key=None, reverse=False): Returns a new sorted list from the items in iterable.
    staticmethod(function): Returns a static method for a function.
    str(object=''): Returns a string version of object.
    sum(iterable, /, start=0): Sums start and the items of an iterable.
    super([type[, object-or-type]]): Returns a proxy object that delegates method calls to a parent or sibling class.
    tuple([iterable]): Creates a tuple object.
    type(object): Returns the type of an object.
    vars([object]): Returns the dict attribute for a module, class, instance, or any other object with a dict attribute.
    zip(*iterables): Creates an iterator of tuples where the i-th tuple contains the i-th element from each of the argument sequences or iterables.

Keywords

    and: Logical AND operator.
    as: Used to create an alias.
    assert: Used for debugging.
    async: Declares an asynchronous function.
    await: Used to call an asynchronous function.
    break: Breaks out of a loop.
    class: Defines a class.
    continue: Continues with the next iteration of a loop.
    def: Defines a function.
    del: Deletes an object.
    elif: Used in conditional statements, same as else if.
    else: Used in conditional statements.
    except: Used with exceptions, what to do when an exception occurs.
    False: Boolean value, result of comparison operations.
    finally: Used with exceptions, a block of code that will be executed no matter if there is an exception or not.
    for: Creates a for loop.
    from: Used to import specific parts of a module.
    global: Declares a global variable.
    if: Makes a conditional statement.
    import: Used to import modules.
    in: Checks if a value is present in a sequence.
    is: Tests object identity.
    lambda: Creates an anonymous function.
    None: Represents a null value.
    nonlocal: Declares a non-local variable.
    not: Logical NOT operator.
    or: Logical OR operator.
    pass: A null statement, a statement that will do nothing.
    raise: Raises an exception.
    return: Exits a function and returns a value.
    True: Boolean value, result of comparison operations.
    try: Makes a try...except statement.
    while: Creates a while loop.
    with: Used to simplify exception handling.
    yield: Ends a function, returns a generator.
